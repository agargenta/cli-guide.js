[
  {
    "step": "0",
    "content": {
      "title": "Introduction",
      "content": [
        " This tutorial shows how to use the Aurora scheduler to run ",
        " (and <code>'printf-debug'</code>) a hello world program on Mesos. ",
        " The operational hierarchy is: <br/> ",
        " <ul> ",
        " <li>Aurora manages and schedules jobs for Mesos to run.</li> ",
        " <li>Mesos manages the individual tasks that make up a job.</li> ",
        " <li>Thermos manages the individual processes that make up a task.</li> ",
        " </ul> ",
        " This is the recommended first Aurora users document to read to start <br/> ",
        " getting up to speed on the system. <br/> ",
        " To get help, email questions to the Aurora Developer List, ",
        " <a href='mailto:dev@aurora.apache.org'>dev@aurora.apache.org</a> "
      ],
      "tips": "",
      "commands": [
      ]
    }
  },
  {
    "step": "1",
    "content": {
      "title": "Setup: Install Aurora",
      "content": [
        " You use the Aurora client and web UI to interact with Aurora jobs. ",
        " To install it locally, see ",
        " <a href='http://aurora.apache.org/documentation/latest/vagrant/'>vagrant.md</a> ",
        " The remainder of this Tutorial assumes you are running ",
        " Aurora using Vagrant. Unless otherwise stated, ",
        " all commands are to be run from the root ",
        " of the aurora repository clone. "
      ],
      "tips": "",
      "commands": [
      ]
    }
  },
  {
    "step": "2",
    "content": {
      "title": "The Script",
      "content": [
        " Our 'hello world' application is a simple Python script that loops ",
        " forever, displaying the time every few seconds. Copy the code ",
        " below and put it in a file named hello_world.py in the root  ",
        " of your Aurora repository clone (Note: this directory is ",
        " the same as <code>/vagrant</code> inside the Vagrant VMs). <br/><br/> ",
        " The script has an intentional bug, which we will explain later on. "
      ],
      "tips": "",
      "commands": [
      ]
    }
  },
  {
    "step": "3",
    "content": {
      "title": "Aurora Configuration",
      "content": [
        " Once we have our script/program, we need to create a ",
        " <i>configuration file</i> that tells Aurora how to manage and launch our Job. ",
        " Save the below code in the file <code>hello_world.aurora.</code> <br/><br/> ",
        " For more about Aurora configuration files, see the ",
        " <a href='http://aurora.apache.org/documentation/latest/configuration-tutorial/'>Configuration Tutorial</a> ",
        " and the ",
        " <a href='http://aurora.apache.org/documentation/latest/configuration-reference/'>Aurora + Thermos Reference</a> ",
        " (preferably after finishing this tutorial). "
      ],
      "tips": "",
      "commands": [
      ]
    }
  },
  {
    "step": "4",
    "content": {
      "title": "What’s Going On In That Configuration File?",
      "content": [
        " More than you might think. <br/> ",
        " <ol> ",
        " <li> ",
        " From a “big picture” viewpoint, it first defines two Processes. ",
        " Then it defines a Task that runs the two Processes  in the order specified ",
        " in the Task definition, as well as specifying what computational and memory ",
        " resources are available for them. Finally, it defines a Job that will ",
        " schedule the Task on available and suitable machines. This ",
        " Job is the sole member of a list of Jobs; you can specify more than one Job in a config file. ",
        " </li> ",
        " <li> ",
        " At the Process level, it specifies how to get your code into the local ",
        " sandbox in which it will run. It then specifies how the code ",
        " is actually run once the second Process starts. ",
        " </li> ",
        " </ol> "
      ],
      "tips": "",
      "commands": [
      ]
    }
  },
  {
    "step": "5",
    "content": {
      "title": "Creating the Job",
      "content": [
        " We’re ready to launch our job! To do so, we use the Aurora Client to issue a  ",
        " Job creation request to the Aurora scheduler. <br/><br/> ",
        " Many Aurora Client commands take a job key argument, which uniquely identifies a Job. ",
        " A job key consists of four parts, each separated by a “/”. The four parts are ",
        " <code>&lt;cluster&gt;/&lt;role&gt;/&lt;environment&gt;/&lt;jobname&gt;</code> ",
        " in that order. When comparing two job keys, if any of the four parts is ",
        " different from its counterpart in the other key, then the two job keys identify ",
        " two separate jobs. If all four values are identical, the job keys identify the same job. <br/> ",
        " <code>/etc/aurora/clusters.json</code> within the Aurora scheduler has the available cluster names. ",
        " For Vagrant, from the top-level of your Aurora repository clone, do: "
      ],
      "tips": "",
      "commands": [
      ]
    }
  },
  {
    "step": "6",
    "content": {
      "title": "Watching the Job Run",
      "content": [
        " Now that our job is running, let’s see what it’s doing. Access the scheduler ",
        " web interface at <code>http://$scheduler_hostname:$scheduler_port/scheduler</code> ",
        " Or when using <code>vagrant</code> <code>http://192.168.33.7:8081/scheduler</code> ",
        " First we see what Jobs are scheduled "
      ],
      "tips": "",
      "commands": [
      ]
    }
  },
  {
    "step": "7",
    "content": {
      "title": "Cleanup",
      "content": [
        " Now that we’re done, we kill the job using the Aurora client "
      ],
      "tips": "",
      "commands": [
      ]
    }
  }
]
